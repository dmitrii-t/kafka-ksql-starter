#!/bin/bash

set -e

waitForKafkaConnect() {
    local c=0
    while true; do
        if docker-compose -f kafka.yml logs kafka-connect-cp|grep -q "Kafka Connect started"; then
           echo "Kafka Connect started"
           break
        fi
        echo "($c) Waiting for Kafka Connect to start"
        ((c+=1))
        sleep 1
    done
}

waitForPostgres() {
    local c=0
    while true; do
        if docker-compose -f consumers.yml logs postgres|grep -q "database system is ready to accept connections"; then
           echo "Postgres started"
           break
        fi
        echo "($c) Waiting for Postgres to start"
        ((c+=1))
        sleep 1
    done
}

waitForConnector() {
    local connector=$1
    local c=0
    while true; do
        if curl -s "http://localhost:18083/connectors/$connector/status"|jq -c -M '[.name,.connector.state,.tasks[].state]|join(":")'|grep -q "$connector:RUNNING:RUNNING"; then
           echo "Connector $connector started"
           break
        fi
        echo "($c) Waiting for connector $connector to start"
        ((c+=1))
        sleep 1
    done
}

waitForTopic() {
    local topic=$1
    local c=0
    while true; do
        if curl -s "http://localhost:8082/topics/$topic"|jq -c -M '.name'|grep -q "$topic"; then
           echo "Topic $topic created"
           break
        fi
        echo "($c) Waiting for topic $topic to create"
        ((c+=1))
        sleep 1
    done
}

waitForSchema() {
     local schema=$1
     local c=0
     while true; do
        if curl -s "http://localhost:8081/subjects/"|jq . |grep -q "$schema"; then
           echo "Schema $schema created"
           break
        fi
        echo "($c) Waiting schema $schema to create"
        ((c+=1))
        sleep 1
    done
}

echo '==> Starting Kafka Connect'
docker-compose -f kafka.yml up -d
echo ''
waitForKafkaConnect

echo '==> Starting Postgres'
docker-compose -f consumers.yml up -d
echo ''
waitForPostgres

#echo ''
#echo '=> Waiting for connector topics to be created ...'
#sleep 5
echo '==> Postgres connectors configured'

# Set up Kafka topics
echo ''
echo '==> Setting up topics'
docker-compose -f kafka.yml exec broker kafka-topics --create --topic transaction_input --partitions 1 --replication-factor 1 --if-not-exists --zookeeper zookeeper:2181
echo ''
waitForTopic "transaction_input"

# Create some schemas we need for the KSQL
echo ''
echo '==> Setting up schemas'

curl -X "POST" "http://localhost:8081/subjects/transaction_signed-value/versions" -H "Content-Type: application/vnd.schemaregistry.v1+json" -d@./scripts/schema-registry/create_schema_transaction_signed.json
echo ''
waitForSchema "transaction_signed-value"

echo ''
curl -X "POST" "http://localhost:8081/subjects/summary-value/versions" -H "Content-Type: application/vnd.schemaregistry.v1+json" -d@./scripts/schema-registry/create_schema_summary.json
echo ''
waitForSchema "summary-value"

echo '==> Schemas done'

# Create the KSQL streams and tables needed for the app
# Note that the Streams being created for the sink into Postgres are a bit funky because of upper/lowercase columns
echo ''
echo '==> Create the KSQL streams'

echo ''
curl -X "POST" "http://localhost:8088/ksql" -H "Content-Type: application/vnd.ksql.v1+json; charset=utf-8" -d@./scripts/ksql/create_stream_transaction_input.json
echo ''
waitForTopic "transaction_input"

echo ''
curl -X "POST" "http://localhost:8088/ksql" -H "Content-Type: application/vnd.ksql.v1+json; charset=utf-8" -d@./scripts/ksql/create_stream_transaction_signed.json
echo ''
waitForTopic "transaction_signed"

echo ''
curl -X "POST" "http://localhost:8088/ksql" -H "Content-Type: application/vnd.ksql.v1+json; charset=utf-8" -d@./scripts/ksql/create_stream_summary.json
echo ''
waitForTopic "summary"

# Set up the connectors for Postgres
# Note that slot.name cannot contain hyphens
echo ''
echo '==> Setting up Postgres connectors'

curl -X "POST" "http://localhost:18083/connectors/" -H "Content-Type: application/json; charset=utf-8" -d@./scripts/kafka-connect/create_sink_transaction.json
echo ''
waitForConnector 'jdbc-transaction-sink'

curl -X "POST" "http://localhost:18083/connectors/" -H "Content-Type: application/json; charset=utf-8" -d@./scripts/kafka-connect/create_sink_summary.json
echo ''
waitForConnector 'jdbc-summary-sink'

# Setup completed
echo ''
echo '==> Setup completed'

# Runs dataload
dataload_timeout=5
echo "==> Running Dataload for ${dataload_timeout}sec"
start-dataload
sleep "$dataload_timeout"
echo "Stopping dataload"
stop-dataload 2> /dev/null

# Done
echo ''
echo '=> Done'

